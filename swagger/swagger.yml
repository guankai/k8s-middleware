swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Url http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /namespace/:
    get:
      tags:
      - namespace
      description: get all namespaces
      operationId: NamespaceController.Get
      responses:
        "200": {}
    post:
      tags:
      - namespace
      description: create a namespace
      operationId: NamespaceController.Post
      parameters:
      - in: formData
        name: namespace
        description: namespace name
        required: true
        type: string
      responses:
        "200": {}
  /namespace/{namespace}:
    delete:
      tags:
      - namespace
      description: delete a namespace
      operationId: NamespaceController.Delete
      parameters:
      - in: path
        name: namespace
        description: the namespace you want to delete
        required: true
        type: string
  /node/:
    get:
      tags:
      - node
      description: List all nodes
      operationId: NodeController.List
      responses:
        "200": {}
  /node/{name}:
    get:
      tags:
      - node
      description: get node information by name
      operationId: NodeController.Get
      parameters:
      - in: path
        name: name
        description: node name
        required: true
        type: string
      responses:
        "200": {}
  /object/:
    get:
      tags:
      - object
      description: get all objects
      operationId: ObjectController.GetAll
      responses:
        "200":
          schema:
            $ref: '#/definitions/Object'
        "403":
          description: :objectId is empty
    post:
      tags:
      - object
      description: create object
      operationId: ObjectController.Create
      parameters:
      - in: body
        name: body
        description: The object content
        required: true
        schema:
          $ref: '#/definitions/Object'
      responses:
        "200":
          description: '{string} models.Object.Id'
        "403":
          description: body is empty
  /object/{objectId}:
    get:
      tags:
      - object
      description: find object by objectid
      operationId: ObjectController.Get
      parameters:
      - in: path
        name: objectId
        description: the objectid you want to get
        required: true
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/Object'
        "403":
          description: :objectId is empty
    put:
      tags:
      - object
      description: update the object
      operationId: ObjectController.Update
      parameters:
      - in: path
        name: objectId
        description: The objectid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: The body
        required: true
        schema:
          $ref: '#/definitions/Object'
      responses:
        "200":
          schema:
            $ref: '#/definitions/Object'
        "403":
          description: :objectId is empty
    delete:
      tags:
      - object
      description: delete the object
      operationId: ObjectController.Delete
      parameters:
      - in: path
        name: objectId
        description: The objectId you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: objectId is empty
  /rc/:
    post:
      tags:
      - rc
      description: create Replication Controller
      operationId: RCController.Post
      parameters:
      - in: body
        name: rc_params
        description: required params for RC
        required: true
        schema:
          $ref: '#/definitions/ReplicationControllerCopy'
  /rc/{namespace}:
    get:
      tags:
      - rc
      description: get Replication Controller in specified namespace
      operationId: RCController.Get
      parameters:
      - in: path
        name: namespace
        description: namespace of the rc resources
        required: true
        type: string
  /rc/{rc_name}:
    delete:
      tags:
      - rc
      description: delete ReplicationController
      operationId: RCController.Delete
      parameters:
      - in: query
        name: namespace
        description: namespace
        required: true
        type: string
      - in: path
        name: rc_name
        description: replication controller name
        required: true
        type: string
  /user/:
    get:
      tags:
      - user
      description: get all Users
      operationId: UserController.GetAll
      responses:
        "200":
          schema:
            $ref: '#/definitions/User'
    post:
      tags:
      - user
      description: create users
      operationId: UserController.CreateUser
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        "200":
          description: '{int} models.User.Id'
        "403":
          description: body is empty
  /user/{uid}:
    get:
      tags:
      - user
      description: get user by uid
      operationId: UserController.Get
      parameters:
      - in: path
        name: uid
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/User'
        "403":
          description: :uid is empty
    put:
      tags:
      - user
      description: update the user
      operationId: UserController.Update
      parameters:
      - in: path
        name: uid
        description: The uid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        "200":
          schema:
            $ref: '#/definitions/User'
        "403":
          description: :uid is not int
    delete:
      tags:
      - user
      description: delete the user
      operationId: UserController.Delete
      parameters:
      - in: path
        name: uid
        description: The uid you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: uid is empty
  /user/login:
    get:
      tags:
      - user
      description: Logs user into the system
      operationId: UserController.Login
      parameters:
      - in: query
        name: username
        description: The username for login
        required: true
        type: string
      - in: query
        name: password
        description: The password for login
        required: true
        type: string
      responses:
        "200":
          description: '{string} login success'
        "403":
          description: user not exist
  /user/logout:
    get:
      tags:
      - user
      description: Logs out current logged in user session
      operationId: UserController.logout
      responses:
        "200":
          description: '{string} logout success'
definitions:
  Object:
    title: Object
    type: object
    properties:
      ObjectId:
        type: string
      PlayerName:
        type: string
      Score:
        type: integer
        format: int64
  Profile:
    title: Profile
    type: object
    properties:
      Address:
        type: string
      Age:
        type: integer
        format: int64
      Email:
        type: string
      Gender:
        type: string
  ReplicationControllerCopy:
    title: ReplicationControllerCopy
    type: object
  User:
    title: User
    type: object
    properties:
      Id:
        type: string
      Password:
        type: string
      Profile:
        $ref: '#/definitions/Profile'
      Username:
        type: string
tags:
- name: object
  description: |
    Operations about object
- name: user
  description: |
    Operations about Users
- name: node
  description: |
    Operations about Nodes
- name: namespace
  description: |
    Operations about Namespace
- name: rc
  description: |
    Operations about Replication Controllers
